import{_ as e,o as s,c as t,R as a}from"./chunks/framework.af956f17.js";const P=JSON.parse('{"title":"VitePress Edit Link 编辑页面 - VitePress中文文档","description":"VitePress中文文档之编辑页面","frontmatter":{"title":"VitePress Edit Link 编辑页面 - VitePress中文文档","description":"VitePress中文文档之编辑页面","tags":["VitePress中文文档,VitePress Edit Link,VitePress 编辑页面"],"head":[["meta",{"name":"keywords","content":"VitePress中文文档,VitePress Edit Link,VitePress 编辑页面"}]]},"headers":[],"relativePath":"vitepressCn/theme-pre-next-link.md"}'),n={name:"vitepressCn/theme-pre-next-link.md"},i=a(`<h1 id="上-下-一篇" tabindex="-1">上（下）一篇 <a class="header-anchor" href="#上-下-一篇" aria-label="Permalink to &quot;上（下）一篇&quot;">​</a></h1><p>你可以自定义上一篇和下一篇链接的文本。如果你想在上一篇/下一篇链接上显示与你的侧边栏上不同的文字，这很有帮助。</p><h2 id="prev" tabindex="-1">prev <a class="header-anchor" href="#prev" aria-label="Permalink to &quot;prev&quot;">​</a></h2><ul><li><p>Type: string</p></li><li><p>Details:</p><p>指定显示在通往前一页的链接上的文字。</p><p>如果你不在<code>frontmatter</code>中设置这个，文本将从侧边栏的配置中推断出来。</p></li><li><p>例子:</p></li></ul><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">---</span></span>
<span class="line"><span style="color:#F07178;">prev</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Get Started | Markdown</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">---</span></span></code></pre></div><h2 id="next" tabindex="-1">next <a class="header-anchor" href="#next" aria-label="Permalink to &quot;next&quot;">​</a></h2><ul><li><p>Type: string</p></li><li><p>Details:</p><p>同<code>prev</code>。</p></li></ul>`,7),r=[i];function l(p,o,c,d,h,_){return s(),t("div",null,r)}const u=e(n,[["render",l]]);export{P as __pageData,u as default};
