import{_ as s,o,c as a,R as l}from"./chunks/framework.af956f17.js";const n="/images/web/run.jpg",p="/images/web/run2.jpg",e="/images/web/run3.jpg",u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"studyCn/Javascript/forInforOf.md"}'),r={name:"studyCn/Javascript/forInforOf.md"},t=l(`<h2 id="for-in-缺陷" tabindex="-1">for in 缺陷 <a class="header-anchor" href="#for-in-缺陷" aria-label="Permalink to &quot;for in 缺陷&quot;">​</a></h2><ol><li><p>for-in用来循环对象中的属性，但是通过for-in循环输出的属性名的<code>顺序</code>是不可测的。具体来说，所有属性都会被返回一次，但返回的先后次序可能会因浏览器而异。</p></li><li><p>ES5之前：如果表示要迭代的对象的变量值为null或undefined，for-in语句会<code>抛出错误</code>；</p></li><li><p>ES5之后：这种情况不再抛出错误，而只是不执行循环体。</p></li><li><p>for-in会遍历<code>原型链</code>上的属性</p></li></ol><h2 id="for-in-与-for-of" tabindex="-1">for in 与 for of <a class="header-anchor" href="#for-in-与-for-of" aria-label="Permalink to &quot;for in 与 for of&quot;">​</a></h2><ul><li>for...in 遍历得到 key</li><li>for...of 遍历得到 value</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">22</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">33</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> arr)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">for...in</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> arr)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">for...of</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><img src="`+n+'" alt="run"></p><p>for...in 可以用在可枚举的数据，如：</p><ul><li>对象</li><li>数组</li><li>字符串</li></ul><p>什么是可<code>枚举</code>数据呢？ 使用 <code>Object.getOwnPropertyDescriptors</code> 方法获取指定对象所有的自有属性的属性描述符 每一个属性中 <code>enumerable</code> 都是 <code>true</code>，这时候他就是可枚举的 ![run]<img src="'+p+'" alt="run"></p><p>for...of用于可迭代的数据，如：</p><ul><li>数组</li><li>字符串</li><li>Map</li><li>Set</li></ul><p>什么是可迭代数据呢？</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#A6ACCD;">]</span></span></code></pre></div><p>数组中有个 Symbol.iterator的属性： <img src="'+e+'" alt="run"></p><ol><li><p>只要一个数据已经实现了Iterator接口, 那么这个数据就有一个叫做<code>[Symbol.iterator]</code>的属性</p></li><li><p><code>[Symbol.iterator]</code>的属性会返回一个函数</p></li><li><p><code>[Symbol.iterator]</code>返回的函数执行之后会返回一个对象</p></li><li><p><code>[Symbol.iterator]</code>函数返回的对象中又一个名称叫做next的方法</p></li><li><p><code>next</code>方法每次执行都会返回一个对象 <code>{value: 10, done: false} </code></p></li><li><p>这个对象中存储了当前取出的数据和是否取完了的标记</p></li></ol>',15),c=[t];function i(y,D,C,F,d,f){return o(),a("div",null,c)}const _=s(r,[["render",i]]);export{u as __pageData,_ as default};
