import{_ as i,o as e,c as o,R as a}from"./chunks/framework.af956f17.js";const l="/images/web/box-sizing.png",x=JSON.parse('{"title":"","description":"","frontmatter":{"0":"t","1":"i","2":"t","3":"l","4":"e","5":" ","6":"关","7":"于","8":"C","9":"S","10":"S"},"headers":[],"relativePath":"studyCn/CSS/index.md"}'),t={name:"studyCn/CSS/index.md"},d=a('<h2 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-label="Permalink to &quot;盒模型&quot;">​</a></h2><p><img src="'+l+'" alt="盒模型"></p><h2 id="box-sizing" tabindex="-1">box-sizing <a class="header-anchor" href="#box-sizing" aria-label="Permalink to &quot;box-sizing&quot;">​</a></h2><p><code>box-sizing</code> 主要分为 <code>border-box</code> 和 <code>content-box</code></p><p>拿 width 举例：</p><p><code>content-box： width = content + padding + border</code></p><p><code>border-box： width = content</code></p><p>为了方便样式计算，一般采用 <code>border-box</code></p><h2 id="外边距塌陷" tabindex="-1">外边距塌陷 <a class="header-anchor" href="#外边距塌陷" aria-label="Permalink to &quot;外边距塌陷&quot;">​</a></h2><p>外边距塌陷也被称为外边距合并。</p><p>是指两个在正常流中相邻的<strong>上下块级元素</strong>的边距塌陷，垂直距离取两个值中的较大者。</p><h2 id="子元素有高度-父元素高度为0" tabindex="-1">子元素有高度，父元素高度为0 <a class="header-anchor" href="#子元素有高度-父元素高度为0" aria-label="Permalink to &quot;子元素有高度，父元素高度为0&quot;">​</a></h2><p>首先，这种情况被称为<strong>高度坍塌</strong>。</p><ol><li><p>父元素 <code>position: absolute</code> 绝对定位，脱离文档流</p></li><li><p>父元素 <code>float</code> 设置了浮动，脱离文档流</p></li></ol><h2 id="清除浮动" tabindex="-1">清除浮动 <a class="header-anchor" href="#清除浮动" aria-label="Permalink to &quot;清除浮动&quot;">​</a></h2><ol><li><p>父元素设置 <code>overflow: hidden;</code></p></li><li><p>在父元素中添加一个空元素，设置 <code>clear:both</code></p></li><li><p>给父元素的伪元素添加 <code>clear:both</code></p></li></ol><h2 id="伪元素和伪类的区别" tabindex="-1">伪元素和伪类的区别 <a class="header-anchor" href="#伪元素和伪类的区别" aria-label="Permalink to &quot;伪元素和伪类的区别&quot;">​</a></h2><ul><li>伪类</li></ul><p>类不就是 <code>class=&#39;title&#39;</code> ，所以，它就是添加所谓的效果的。</p><p>常用的伪类有： <code>:active</code> , <code>:focus</code> , <code>:hover</code> , <code>:link</code> , <code>:visited</code> , <code>:visited</code> 等。</p><ul><li>伪元素</li></ul><p>元素不就是类似于 <code>&lt;div&gt;&lt;/div&gt;</code> 这种，在文档中有实际的占用空间的，能用来创建一些原有 DOM 结构不存在的元素。</p><p>常用的伪元素有： <code>::before</code> , <code>::after</code> , <code>::first-letter</code> , <code>::first-line</code> 等。</p><p>一般伪元素用 <code>::</code> 双冒号，伪类用 <code>:</code> 单冒号</p><h2 id="link和-import的区别" tabindex="-1">link和@import的区别 <a class="header-anchor" href="#link和-import的区别" aria-label="Permalink to &quot;link和@import的区别&quot;">​</a></h2><ol><li><p>link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</p></li><li><p>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</p></li><li><p>link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</p></li><li><p>link支持使用Javascript控制DOM去改变样式；而@import不支持。</p></li></ol><h2 id="display-none与visibility-hidden的区别" tabindex="-1">display:none与visibility:hidden的区别 <a class="header-anchor" href="#display-none与visibility-hidden的区别" aria-label="Permalink to &quot;display:none与visibility:hidden的区别&quot;">​</a></h2><h4 id="dom结构" tabindex="-1">DOM结构 <a class="header-anchor" href="#dom结构" aria-label="Permalink to &quot;DOM结构&quot;">​</a></h4><ol><li><p>display:会让元素完全从渲染树中消失，渲染的时候不占据任何空间</p></li><li><p>visibility:不会让元素从渲染树消失，渲染元素继续占据空间，只是内容不可见</p></li><li><p>opacity:不会让元素从渲染树消失，渲染元素继续占据空间，只是内容不可见</p></li></ol><h4 id="dom事件" tabindex="-1">DOM事件 <a class="header-anchor" href="#dom事件" aria-label="Permalink to &quot;DOM事件&quot;">​</a></h4><ul><li><p>display:无法进行 DOM 事件</p></li><li><p>visibility:无法进行 DOM 事件</p></li><li><p>opacity:可以进行 DOM 事件</p></li></ul><h4 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h4><ul><li><p>display:是非继承属性，通过修改子孙节点属性无法显示</p></li><li><p>visibility:是继承属性，子孙节点消失由于继承了hidden，通过设置visible可以让子孙节点显式</p></li><li><p>opacity:是非继承属性，通过修改子孙节点属性无法显示</p></li></ul><h4 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h4><ul><li><p>display:修改元素会造成文档回流，性能消耗较大，读屏器不会读取display: none元素内容</p></li><li><p>visibility:修改元素只会造成元素的重绘，性能消耗较少，读屏器读取visibility: hidden元素内容</p></li><li><p>opacity:修改元素会造成重绘，但是性能会更好</p></li></ul><h4 id="transition" tabindex="-1">transition <a class="header-anchor" href="#transition" aria-label="Permalink to &quot;transition&quot;">​</a></h4><p>display:transition不支持display</p><ul><li><p>visibility:transition从理论上来说是支持visibility，但是过渡效果不如平常属性一样，从hidden到visible是无过渡效果的，从visible到hidden变成了一种延迟效果。</p></li><li><p>opacity:transition支持opacity</p></li></ul><h2 id="z-index属性在什么情况下不起作用" tabindex="-1">z-index属性在什么情况下不起作用 <a class="header-anchor" href="#z-index属性在什么情况下不起作用" aria-label="Permalink to &quot;z-index属性在什么情况下不起作用&quot;">​</a></h2><ul><li><p>元素没有设置position属性（不包括static）</p></li><li><p>元素设置了浮动float</p></li><li><p>父级元素的z-index比子级元素的z-index小</p></li><li><p>元素的父级设置了position: relative</p></li></ul>',40),n=[d];function r(p,c,s,h,b,u){return e(),o("div",null,n)}const y=i(t,[["render",r]]);export{x as __pageData,y as default};
