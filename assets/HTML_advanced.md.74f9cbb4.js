import{o as e,c as a,b as t}from"./app.8d49a5af.js";const l='{"title":"HTML5离线存储","description":"","frontmatter":"title HTML 进阶","headers":[{"level":2,"title":"HTML5离线存储","slug":"html5离线存储"},{"level":3,"title":"HTML5的离线储存","slug":"html5的离线储存"},{"level":3,"title":"离线储存资源进行管理和加载","slug":"离线储存资源进行管理和加载"}],"relativePath":"HTML/advanced.md","lastUpdated":1668422604384}',r={},h=t('<h2 id="html5离线存储"><a class="header-anchor" href="#html5离线存储" aria-hidden="true">#</a> HTML5离线存储</h2><h3 id="html5的离线储存"><a class="header-anchor" href="#html5的离线储存" aria-hidden="true">#</a> HTML5的离线储存</h3><p>HTML5的离线存储是基于一个新建的.manifest文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，<br>这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p><h3 id="离线储存资源进行管理和加载"><a class="header-anchor" href="#离线储存资源进行管理和加载" aria-hidden="true">#</a> 离线储存资源进行管理和加载</h3><p>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</p>',5);r.render=function(t,l,r,i,d,s){return e(),a("div",null,[h])};export default r;export{l as __pageData};
